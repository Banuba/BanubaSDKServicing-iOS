// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name BanubaSDKServicing
import ARKit
import AVFoundation
import AVKit
import CoreMedia
import Foundation
import Swift
import UIKit
@objc public protocol EffectSubtypeModificationsEventListener {
  @objc func didChangeEffectSubtype(_ subtypeName: Swift.String)
  @objc func didInitiateEffectSubtype(_ subtypeName: Swift.String)
}
@objc public protocol SDKEffectsTextureServicing {
  @objc func effectAddImageTexture(image: UIKit.UIImage)
  @objc func effectAddVideoTexture(asset: AVFoundation.AVURLAsset)
  @objc func unloadEffectTexture()
}
@objc public protocol SDKEffectsServicing : BanubaSDKServicing.SDKEffectsTextureServicing {
  @objc func loadMask(name: Swift.String)
  @objc func effectDidBeginApplying()
  @objc func effectDidEndApplying()
  @objc func effectDidResetApplying()
  @objc func effectDidChangeState()
  @objc func unloadMask()
  @objc func removeAllFilters()
  @objc func applyFilter(_ filter: BanubaSDKServicing.EffectModel)
  @objc func removeFilter(_ filter: BanubaSDKServicing.EffectModel)
  @objc func setEffectSubtypeModificationsEventListener(_ listener: BanubaSDKServicing.EffectSubtypeModificationsEventListener)
  @objc func effectsPaths(includeBeautyEffect: Swift.Bool) -> [Swift.String]
}
public protocol EffectsServicing {
  func apply(effect: BanubaSDKServicing.RenderEffect)
  func remove(effect: BanubaSDKServicing.RenderEffect)
  func removeAll()
}
public class BeautyEffectManager : BanubaSDKServicing.BeautyEffectManaging {
  public var applyHandler: ((Swift.String?) -> Swift.Void)?
  public var enabled: Swift.Bool {
    get
    set(value)
  }
  public init()
  public func enable()
  public func disable()
  @objc deinit
}
@objc public protocol SDKOutputServicing {
  @objc var isRecording: Swift.Bool { get }
  @objc var isEnoughDiskSpaceForRecording: Swift.Bool { get }
  @objc func startVideoCapturing(fileURL: Foundation.URL?, progress: @escaping (CoreMedia.CMTime) -> Swift.Void, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  @objc func startVideoCapturing(fileURL: Foundation.URL?, progress: @escaping (CoreMedia.CMTime) -> Swift.Void, periodicProgressTimeInterval: Foundation.TimeInterval, boundaryTimes: [Foundation.NSValue], boundaryHandler: @escaping (CoreMedia.CMTime) -> Swift.Void, totalDuration: Foundation.TimeInterval, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  @objc func stopVideoCapturing(cancel: Swift.Bool)
}
public protocol BeautyEffectManaging {
  var enabled: Swift.Bool { get set }
  var applyHandler: ((Swift.String?) -> Swift.Void)? { get set }
}
public protocol RenderEffect : AnyObject {
  var name: Swift.String { get }
  var isLoaded: Swift.Bool { get }
  var isActive: Swift.Bool { get set }
  func load(size: CoreGraphics.CGSize)
  func unload()
  func apply(params: Swift.Dictionary<Swift.String, Swift.String>)
}
@objc public enum PIPShapeTypeAdapter : Swift.Int {
  case none
  case oval
  case circle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum RenderBehaviorAdapter : Swift.Int {
  case fullScreen
  case verticalSplitUp
  case verticalSplitDown
  case horizontalSplitLeft
  case horizontalSplitRight
  case pip
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol SDKPIPServicing {
  @objc var pipRenderSize: CoreGraphics.CGSize { get }
  @objc func seekPIPPlayer(to time: Foundation.TimeInterval)
  @objc func resetPIPShape()
  @objc func createPIPPlayer(withVideoURL url: Foundation.URL, completion: (() -> Swift.Void)?)
  @objc func startPIPPlayer()
  @objc func stopPIPPlayer()
  @objc func setPIPPlayer(renderBehaviour: BanubaSDKServicing.RenderBehaviorAdapter)
  @objc func setPIPPlayer(shapeType type: BanubaSDKServicing.PIPShapeTypeAdapter)
  @objc func setPIPPlayer(centerPoint point: CoreGraphics.CGPoint)
}
@objc public enum CameraModuleSessionType : Swift.Int {
  case frontVideo
  case backVideo
  case frontPhoto
  case backPhoto
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct CameraModulePhotoSettings {
  public let useStabilization: Swift.Bool
  public let flashMode: AVFoundation.AVCaptureDevice.FlashMode
  public init(useStabilization: Swift.Bool, flashMode: AVFoundation.AVCaptureDevice.FlashMode)
}
public struct CameraModuleDefaults {
  public static var viewSize: CoreGraphics.CGSize {
    get
  }
}
@objc public protocol CameraModule : BanubaSDKServicing.SDKBeautyEffectManaging, BanubaSDKServicing.SDKEffectsServicing, BanubaSDKServicing.SDKInputServicing, BanubaSDKServicing.SDKMaskPostprocessServicing, BanubaSDKServicing.SDKOutputServicing, BanubaSDKServicing.SDKPIPServicing {
  @objc var isLoaded: Swift.Bool { get }
  @objc var allowProcessing: Swift.Bool { get set }
  @objc var playerViewSize: CoreGraphics.CGSize { get }
  @objc var autoStart: Swift.Bool { get set }
  @objc func setup(postproccessContext: OpenGLES.EAGLContext)
  @objc func destroy()
  @objc func start(completion: @escaping () -> Swift.Void)
  @objc func stop(completion: (() -> Swift.Void)?)
  @objc func setRenderTarget(view: UIKit.UIView)
  @objc func removeRenderTarget()
  @objc func takeSnapshot(handler: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc func getRendererView() -> UIKit.UIView
}
@objc public class EffectModel : ObjectiveC.NSObject {
  public var url: Foundation.URL?
  public var name: Swift.String?
  public init(url: Foundation.URL)
  public init(name: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol SDKMaskPostprocessServicing {
  @objc func postprocessProcessVideoFrame(_ from: CoreVideo.CVPixelBuffer, to: CoreVideo.CVPixelBuffer, time: CoreMedia.CMTime)
  @objc func postprocessStopVideoProcessing()
  @objc func postprocessPlaybackStop()
  @objc func postprocessSurfaceDestroyed()
  @objc func postprocessSurfaceCreated(with size: CoreGraphics.CGSize)
  @objc func postprocessSetEffectSize(_ size: CoreGraphics.CGSize)
  @objc func postprocessLoadEffect(path: Swift.String)
  @objc func postprocessStartVideoProcessing(with size: CoreGraphics.CGSize)
  @objc func postprocessDraw()
}
public enum OutputServiceError : Swift.Error {
  case notEnoughSpace
  public static func == (a: BanubaSDKServicing.OutputServiceError, b: BanubaSDKServicing.OutputServiceError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public protocol SDKBeautyEffectManaging {
  @objc var isBeautificationEnabled: Swift.Bool { get set }
  @objc func toggleBeautification() -> Swift.Bool
}
@objc public protocol SDKInputServicingDelegate {
  @objc func willOutput(pixelBuffer: CoreVideo.CVPixelBuffer)
}
@objc public protocol SDKARInputServicingDelegate {
  @objc func didUpdate(arFrame: ARKit.ARFrame, session: ARKit.ARSession)
  @objc func didAdd(anchors: [ARKit.ARAnchor], session: ARKit.ARSession)
  @objc func didUpdate(anchors: [ARKit.ARAnchor], session: ARKit.ARSession)
  @objc func didRemove(didRemove anchors: [ARKit.ARAnchor], session: ARKit.ARSession)
}
@objc public protocol SDKInputServicing {
  @objc var isFrontCamera: Swift.Bool { get }
  @objc var zoomFactor: Swift.Float { get }
  @objc var currentCameraSessionType: BanubaSDKServicing.CameraModuleSessionType { get }
  @objc var inputDelegate: BanubaSDKServicing.SDKInputServicingDelegate? { get set }
  @objc var inputARDelegate: BanubaSDKServicing.SDKARInputServicingDelegate? { get set }
  @objc func configureExposureSettings(_ point: CoreGraphics.CGPoint, useContinuousDetection: Swift.Bool)
  @objc func configureFocusSettings(_ point: CoreGraphics.CGPoint, useContinuousDetection: Swift.Bool)
  @objc func setZoomFactor(_ zoomFactor: Swift.Float) -> Swift.Float
  @objc func toggleCamera(completion: @escaping () -> ())
  @objc func startCamera()
  @objc func startAudioCapturing()
  @objc func stopAudioCapturing()
  @objc func setCameraSessionType(_ type: BanubaSDKServicing.CameraModuleSessionType)
  @objc @discardableResult
  func setTorch(mode: AVFoundation.AVCaptureDevice.TorchMode) -> AVFoundation.AVCaptureDevice.TorchMode
  @objc func toggleTorch() -> AVFoundation.AVCaptureDevice.TorchMode
}
